#!/usr/bin/env bash

# DESC: Generic script initialisation (useful paths)
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: $orig_cwd: The current working directory when the script was run
#       $script_path: The full path to the script
#       $script_dir: The directory path of the script
#       $script_name: The file name of the script
#       $script_params: The original parameters provided to the script
#       $ta_none: The ANSI control code to reset all text attributes
# NOTE: $script_path only contains the path that was used to call the script
#       and will not resolve any symlinks which may be present in the path.
#       You can use a tool like GNU CoreUtils readlink or realpath to obtain
#       the "true" path.
#       The same caveat applies to the $script_dir and $script_name variables.
function script_init() {

    readonly orig_cwd="$PWD"
    readonly script_path="${BASH_SOURCE[0]}"
    readonly script_dir="$( cd "$( dirname "${script_path}" )" >/dev/null 2>&1 && pwd )"
    readonly script_name="$(basename "$script_path")"
    readonly script_params="$*"

    # Important to always set as we use it in the exit handler
    readonly ta_none="$(tput sgr0 2> /dev/null || true)"
}

bats_table()
{
  echo 'Bats test failed count:'
  cat bats.log |
    sed -e '/^not ok\|\.bats/!d' |
    tr '[:space:]' '[\n*]' |
    sort |
    uniq -c |
    sort -nr |
    grep bats | tee bats.tbl
}

bats_not_descriptions()
{
  cat bats.log|
    sed -e '/^not ok/!d'|
    cut -f4- -d ' ' >bats.not
}

bats_not_cmds()
{
  echo 'export JLENV_DEBUG=1' >bats_not.cmds
  cat bats.not | while read -r line; do echo "${script_dir}/libs/bats/bin/bats -f '${line}' test" >>bats_not.cmds; done
}

script_init

bats_table
bats_not_descriptions
bats_not_cmds

cat bats.tbl
cat bats_not.cmds

bash bats_not.cmds || true
